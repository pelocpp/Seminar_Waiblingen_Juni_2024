C/C++

Peter Loos

Java, C#, Mobile Progr. (Java), Flutter (Dart)

// =======================================================

https://github.com/pelocpp

peter.loos@gmx.de

// =======================================================

Was sind meine Erwartungen

Was muss drin sein  

Was bringe ich mit 

== Java to C/C++
== JavaScript

== C  
== C++  C ist in C++ ECHT enthalten

// =======================================================

1. Topic:
=========

Datentyp Pointer in C:

// =======================================================

Java ===> ByteCode

2 Übersetzungen:   QuellCode => Byte-Code (neutral)
                   Byte-Code => Maschinencode (bestimmte Hardware)


C/C++ ==> Maschinencode

1 Übersetzung:     QuellCode => Maschinencode (bestimmte Hardware)

// =======================================================

C und "Übersetzen"

a) Grammatik / Syntax   ==> Menü "Compile"

b) Maschinencode        ==> Menü "Build / Erstellen"

Anderes Thema:

Programm ist auf mehrere Dateien verteilt.

=======================================================

Recap:

Java, Interface:

Besteht aus Methoden Signaturen

            oder: Schnittstellen von Methoden.

=======================================================

In C/C++ wird ein Programm von 2 Tools gebaut:

a) Compiler:   QuellCode => .obj File

b) LINKER:     .obj File => 1 Datei mit Maschinencode


.obj File:  Maschinennahe Beschreibung einer C/C++ Datei:
=> Maschinen-Code
=> Vorbelegung von globalen Variablen (Werte ....)
=> Welche Funktionen werden aufgerufen 


=======================================================

Dennis Ritchie:

"A programmer know what he does"

========================================================


// indirekte Wertzuweisung  
    *ip = 456;  
00007FF715292B65  mov         rax,qword ptr [ip]  
00007FF715292B69  mov         dword ptr [rax],1C8h  // 456
   
// direkte Wertzuweisung           
    n = 456;
00007FF715292B6F  mov         dword ptr [n],1C8h  

========================================================

C: Datentyp Pointer

      == Adressen bilden und verwenden
      == Adress Arithmetik

C++:  Datentyp Pointer
      Datentyp Referenz

========================================================

== Adress Arithmetik

int* ip;   

...   // ip: 0x1024

ip = ip + 1;   // ip: 0x1028

Weil ein int im Speicher 4 Bytes belegt
und man mit der Addition von 1 zum
nächsten möglichen int-Wert schreiten möchte

Beispiel: ... AC4  => ... AC8

// ==============================================


Wie werden int-Werte im Speicher abgelegt ???

Binärdarstellung

2-er Komplement.: Rechenvorschrift:

int-Wert ===> Bits (0 und 1) umgesetzt wird.




0001 0101 = 1 mal2 hoch 0 + 1 mal2 hoch 2 +  1 mal2 hoch 4 =1 + 4 + 16 = 21


    d = f;
00007FF7484150F7  cvtss2sd    xmm0,dword ptr [f]  
00007FF7484150FC  movsd       mmword ptr [d],xmm0  
    f = d;
00007FF748415101  cvtsd2ss    xmm0,mmword ptr [d]  
00007FF748415106  movss       dword ptr [f],xmm0  

cvt: convert single-scalar 

// ==========================================

Parameter-Übergabe

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/ParameterPassingTechniques.md

Parameterübergabemechanismus Call-by-Value

Achtung:

'XXX' differs in levels of indirection from 'XXX *' :: FEHLER


Die Abschnitte auf dem Stack nennt man auch

Stack Frame

====> Microcomputer Programmierung  // Stack Frame


============================================================

https://github.com/pelocpp/c_introduction/blob/master/C_Introduction/Exercises/Zeiger/Exercises_Zeiger.md

https://github.com/pelocpp/c_introduction/blob/master/C_Introduction/Exercises/Tausche/Exercises_Tausche.md

// ==============================================
// ==============================================
// ==============================================

C++
===

Klasse in C++:

2 Dateien

a) Beschreibung der Klasse:      Endung .h

b) Implementierung der Klasse:   Endung .cpp

Beispiel: 

Uhrzeit:    Klasse Time

Stunden, Minuten und Sekunden.


==================================================

Java:

    >>>:  Java is heap-based (versus references).


    Time now;

    // was ist 'now': Eine Referenz

    Time now = new Time(15, 12, 0);

    void unterprogramm()
    {
        Time now = new Time(15, 12, 0);
    }

C++:

    >>>:  C++ is stack-based.
    >>>:  C++ is heap-based.


    Time now;

    void unterprogramm()
    {
        Time now;    // C++ is stack-based.
    }

    
    void unterprogramm_02()
    {
        Time* than = new Time(15, 12, 0); // C++ is heap-based.

        delete than;
    }

// ===========================================================

Ressources freigeben:

== try.. catch .. finally <=== Abstürze (Exception) kontrolliert zu behandeln.

// ===========================================================

== Objekt erzeugen:  ==> Ressources anfordern 

== Objekt freigeben: ==> Ressources freigeben


// ===========================================================

Stolperfalle:

    Time than();   

C++: than ist die Deklaration einer Funktion ohne Parameter,
     die ein Objekt des Typs Time zurückliefert.

    https://stackoverflow.com/questions/14077608/what-is-the-purpose-of-the-most-vexing-parse




class Size
{
public:
    unsigned int width;
    unsigned int height;
}


class Point
{
public:
   int x;
   int y;
}

// =================================================

setter // falsche Werte:

A) 

void Time::setHours(int hours)
{
    if (hours >= 0 && hours < 24) {
        m_hours = hours;
    }
    else {
        throw std::exception("wrong value of hours");
    }
}

B) 

bool Time::setHours(int hours)
{
    if (hours >= 0 && hours < 24) {
        m_hours = hours;
        return true;
    }
    else {
        return false;
    }
}

C) 

void Time::setHours(int hours)
{
    if (hours >= 0 && hours < 24) {
        m_hours = hours;
        return true;
    }
    else {
        // nothing: silent error recovery
    }
}

========================================================

Idiome / Paradigmen der OO:

Ein Objekt besitzt zu JEDEM Zeitpunkt gültige Werte !!!

================================================

c++ operator precedence ==> Vorrang

