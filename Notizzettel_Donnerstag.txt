C/C++

Peter Loos

Donnerstag

// =======================================================

https://github.com/pelocpp

// =======================================================

Vererbung

== Interfaces
== Abstrakte Klassen

STL

// =======================================================

Vererbung:

Beobachtung: Technik eine Sache

Technik: KEINE ANTWORT: WANN setze ich Vererbung ein ???

Frage:

== Klasse Rectangle

== Klasse ColoredRectangle

--  Ein ColoredRectangle ist eine Sorte von Rectangle

--  Ein ColoredRectangle kann ein Rectangle erweitern

==> Ein ColoredRectangle ist ein Rectangle.

Beziehungen:   Relationships

ist-ein Beziehung  // is-a Relationship

Aussage: is-a  =======> Vererbung.

Ein ColoredRectangle ist eine Spezialisierung eines Rechtecks.

Ein Rectangle ist eine Verallgemeinerung (Generalisierung) eines ColoredRectangles.



Probe:

== Klasse Point / Punkt
== Klasse Line / Linie

Frage:

Eine Linie enthält mehrere Punkte.

??? Eine Linie ist ein Punkt

??? Ein Punkt ist eine Linie

=====>

Niemals: Point und Linie das Prinzip der Vererbung anwenden

Beziehung:

Eine Linie (hat-einen /) hat-zwei Punkte.

Hat-ein  / has-a Beziehung.

class Line
{
    Point m_begin;
    Point m_end
}

=====================================================

Vererbung ====>

Code soll wieder verwendet werden.

Daten sollen an einer zentralen Stelle definiert werden

Was wird NICHT vererbt ???

KONSTRUKTOREN

=================================================

void test_inheritance()
{
    ColoredRectangle cr(1, 1, 10, 20, 99);

    // cr.Rectangle::draw();

    cr.draw();
}

draw verdeckt eine Methode desselben Namens in der Basisklasse

VERDECKEN: Problematisch !!!!

=================================================

Beobachtung:

"Vererbung" hat in der OO DREI Facetten:
----------------------------------------

A) Methode 'draw' ist in der KINDLASSE NICHT VORHANDEN. 

   Erbschaft:

   ==> Methoden der Vaterklasse werden an die Kindklasse vererbt.


B) Methode 'draw' ist in der KINDLASSE VORHANDEN:

   ==> Methode 'draw' ersetzt die Methode desselben Namens in der Vaterklasse.

   ==> Die Erbschaft wird abgelehnt.

   ==> VERDECKEN

   ==> VORSICHT: Geruch // ist das so gemeint.


C)  Methode 'draw' ist in der KINDLASSE VORHANDEN,
    die Methode desselben Namens der Vaterklasse wird AUFGERUFEN:

   ==> Methode 'draw' wird erweitert !!!

=================================================

Virtuelle Methodenaufrufmechnismus:


== Dynamische Binden

== Es wird der Aufruf zur LAUFZEIT festgelegt.

== Runtime-Time Invocation

== Dynamic Dispatch (Rust-Wording)

((

Wie wird das gemacht ?????????????????????????

Adresse nicht bekannt!

Die Methode wird INDIREKT aufgerufen.

Wenn eine Klasse MINDESTENS eine virtuelle Methode hat:

==> Tabelle mit Methodenadressen hinzugefügt:

==> vtable / virtual function pointer table

))


Reguläre Methodenaufrufmechnismus:

== Statisches Binden

== Es wird der Aufruf zur ÜBERSETZUNGSZEIT festgelegt.

== Compile-Time Invocation

== Static Dispatch (Rust-Wording)


Ein Vergleich:

    rp->draw(); 
00007FF67C502D11  mov         rax,qword ptr [rp]  
00007FF67C502D15  mov         rax,qword ptr [rax]  
00007FF67C502D18  mov         rcx,qword ptr [rp]  
00007FF67C502D1C  call        qword ptr [rax]  

    rp->eraseBackground();
00007FF67C502D1F  mov         rcx,qword ptr [rp]  
00007FF67C502D23  call        Rectangle::eraseBackground (07FF67C5019B0h)  


Hmmmm,

virtuelle Methoden sind im Aufruf LANGSAMER.

===============================================================

Bemerkung:

Ein Vergleich zu Java:

Wo ist das Schlüsselwort 'virtual' in Java:

============> ALLES in Java ist per Default 'virtual'

Mit 'final' kann ich zum Static Binding wechseln.

===============================================================

Griechisch:


Viele  ==> Poly

Körper / Gestalt:   Morphus

Vielgestaltigkeit: Polymorphismus

============================================

Warum ist in C++

    virtual void draw() = 0;

eine abstrakte Methode ???

Bedeutet: In der vtable (Tabelle mit den Methodenadressen)
steht an der Stelle von draw 0: KEINE Adresse.


C++:

Man spricht von "pure-virtual" Methoden.

Keine Realisierung: abstrakt.

============================================

Was ist eine abstrakte Klasse ???

== Eine unvollständige Klasse

== Sie enthält abstrakte Methoden:

   Schnittstellen / Deklarationen von Methoden,

   aber KEINE Realisierung dieser Methoden.





Wozu verwende ich eine abstrakte / unvollständige Klasse ???

a) Sie sollte Daten enthalten, die für alle Kindklassen
   relevant sind.

b) Sie sollte Methoden inkl. Realisierung enthalten,
   die für alle Kindklassen relevant sind.


Modern C++:  Annotation 'override'


Weiteres Schlüsselwort: final

Damit verhindet man, dass in Kindeklassen die Methode

nochmals abgeleitet, überschrieben wird.

============================================

Interfaces:

Wie in Java geht das auch in C++:

Hmm, etwas "einfach gestrickt" :)

============================================

Design:

Hierarchie:

A) Interfaces - durchaus mehrere

B) Abstrakte Klassen:

   i) Teilrealisierung der Funkionalität

      "Kann man da was raus-faktorisieren"

   ii) Daten, die für alle Kindklassen relevant sind.

C) Konkrete Klassen:

   Realisierung aller noch offenen abstrakten Methoden.

=========================================================

Was ist eine struct:

A) Stammt von C:

B) Beispiel:

struct Person
{
   char name[20];
   int  age;
};

Eine struct fasst Variablen / Daten
unterschiedlichen Typs unter einem
gemeinsamen Namen zusammen.

Es gibt KEINE Funktionen / Methoden
in einer struct.

Was ist dann

struct IRectangle
{
    virtual void draw() = 0;
};

Wenn man von der C-Regel bzgl. struct 
abweicht:

struct IRectangle
{
    virtual void draw() = 0;
};

identisch zu

class IRectangle
{
public:
    virtual void draw() = 0;
};

=========================================================

Die Standard-Bibliothek:
------------------------

Templates / Schablonen

== Java Generics

Historie:

C++ :

C++:
----

Bjarne Stroustrup:   C with Classes

Generische Programmierung:
--------------------------

Alexander Alexandrowitsch Stepanow

==> C with Classes  ==> Bibliothek

Was ist Generische Programmierung: ????

struct Location
{
    int x;
    int y;
};


struct Location
{
    size_t x;
    size_t y;
};

Unabhängigkeit von Datentypen in Klassen / Funktionen
erreichen.

Wie :

===================================================

Template:   Definieren

Klassen:    Template instanziieren ==> Klasse

Objekt:     Klasse instanziieren ==> Objekt

===================================================
===================================================

C++ Standard Bibliothek: STL

Standard Template Library 

== Container        std::vector

== Iteratoren       std::vector<T>::iterator

== Algorithmus      std::for_each

== Aufrufbares Objekt

== for_each, wie es es in anderen Programmiersprachen gibt:
   Range-Based for-Loop


STL:   Design Zielen // Entwurf

Um eine einheitliche Schnittstelle für
UNTERSCHIEDLICHE Container zu haben.

-------------------------------

Leichte Analogie zu Java:

== Container
== interface Iterator


========================================

13 + 6
19 + 9
28 + 14
42 + 21
63 + 31 
94

n_neu = n_alt * 1.5 ;

========================================

STL:

"durchlaufen": Vom ersten zum letzten Element


Wie durchlaufe einen Vektor
Wie durchlaufe einen Binary Search Tree
Wie durchlaufe eine Hash Tabelle
Wie durchlaufe eine einfach verkette Liste

Gesucht: EIN EINHEITLICHES VERFAHREN.

"STL Iteratoren Konzept"

Was ist ein Iterator?

Eine POSITION in einem Container.

Was kann ein Iterator:

A) Den Wert hinter der Position zurückliefern:

   operator *

B) Gehe von einer Position zur nächsten:

   operator ++

C) Vergleiche zwei Positionen:

   operator ==


Wie komme ich zu einem Iterator ???

Ein Container muss Auskunft geben:

begin()

end()

=======================================

Why should I go for

    std::fill(
        numbers.begin(),
        numbers.end(),
        2
    );

Weil std::fill Optimierungen einsetzen kann,

wie std::memset (ansatzweise), die uns auf der C++
Ebene nicht zur Verfügung stehen.

=======================================


C++: Callable Object  // Functor 

// ===============================================


===>   STL:    PhoneBook    // Hash-Tabelle

===>   void* Pointer

===>   Range-Based for-Loop

===>   Lambdas

===>   auto

===>   File lesen // kopieren ....

15  // 15.30
